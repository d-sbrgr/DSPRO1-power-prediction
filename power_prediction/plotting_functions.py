import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


def line_plot_pred(dates, y_actual, y_pred):
    """
    :param dates: DatetimeIndex generated by test_dates function
    :param y_actual: y_test data
    :param y_pred: the predicted data
    :return:
    """

    sns.set_palette("deep")

    y_test_scaled_down = y_actual / 1e9
    y_pred_scaled_down = y_pred / 1e9

    # Set the figure size
    plt.figure(figsize=(15, 5))

    # Plot the actual and predicted values using Seaborn
    sns.lineplot(x=dates, y=y_test_scaled_down, label='Actual', linewidth=3.5, alpha=0.5)
    sns.lineplot(x=dates, y=y_pred_scaled_down, label='Predicted', linewidth=1.5)

    # Add title and labels
    plt.title('Electricity Consumption Prediction', fontsize=16)
    plt.xlabel('Date', fontsize=14)
    plt.ylabel('Electricity Consumption (kWh)', fontsize=14)

    # Add gridlines only for y-axis to improve readability
    plt.grid(axis='x', linestyle='--', alpha=0.75)
    # Format y-axis as plain numbers (optional)
    plt.ticklabel_format(style='plain', axis='y')

    # Add a legend
    plt.legend()

    # Show the plot
    plt.show()

def test_dates(test_df, y_test):
    """
    extracts the dates out of the test dataframe for plotting

    :param test_df: the dataframe used for testing. Offset 1 year
    :param y_test: the data that is used for testing the model
    :return: DatetimeIndex uses for plotting
    """
    df = _set_date_index(test_df)
    dates = df.index
    dates = dates[:len(y_test)]
    return dates

def _is_date_index(df):
    """
    Checks if the DataFrame has a DateTimeIndex, indicating that
    the index is set to a date in a pandas timeseries DataFrame.
    """
    return isinstance(df.index, pd.DatetimeIndex)

def _set_date_index(df, date_column_name='Date'):
    """
    Sets the date column as the index in the DataFrame if it's not already a DateTimeIndex.
    Raises:
    ValueError: If the specified date column is not found or cannot be converted to datetime.
    """
    # Check if the index is already a DateTimeIndex
    if _is_date_index(df):
        return df

    # Check if the specified date column exists in the DataFrame
    if date_column_name not in df.columns:
        raise ValueError(f"Column '{date_column_name}' not found in the DataFrame.")

    # Try to convert the date column to datetime (in case it's not already in datetime format)
    df[date_column_name] = pd.to_datetime(df[date_column_name], errors='raise')

    # Set the date column as the index
    df = df.set_index(date_column_name)

    return df
